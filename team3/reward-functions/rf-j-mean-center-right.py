import math


def dist(point1, point2):
    return ((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) ** 0.5


right_waypoints = [[-0.37902504, -4.86839246],
                   [-0.50902498, -4.86851788],
                   [-0.63902492, -4.86863959],
                   [-0.81053579, -4.86880016],
                   [-1.11205399, -4.86908102],
                   [-1.41357398, -4.86936283],
                   [-1.71509194, -4.86964417],
                   [-2.01661205, -4.86992598],
                   [-2.31813407, -4.87020779],
                   [-2.61964989, -4.87049294],
                   [-2.92115593, -4.87077188],
                   [-3.22270107, -4.87104177],
                   [-3.52431011, -4.87135077],
                   [-3.8257091, -4.87172318],
                   [-4.12672997, -4.87189388],
                   [-4.42888689, -4.8717041],
                   [-4.73328686, -4.87261581],
                   [-5.03162384, -4.87566423],
                   [-5.32034206, -4.8730669],
                   [-5.57434511, -4.86491299],
                   [-5.76288414, -4.83249092],
                   [-5.88118982, -4.78101921],
                   [-5.95262003, -4.70011187],
                   [-6.00736284, -4.55820608],
                   [-6.04263496, -4.35590696],
                   [-6.05246878, -4.15008593],
                   [-6.02316713, -3.97782993],
                   [-5.94816399, -3.81896806],
                   [-5.8361659, -3.67026711],
                   [-5.69321108, -3.54863095],
                   [-5.52312422, -3.45625806],
                   [-5.33187199, -3.3967371],
                   [-5.10423088, -3.37078404],
                   [-4.83701277, -3.36238909],
                   [-4.54173422, -3.36446095],
                   [-4.23514795, -3.36176395],
                   [-3.93341398, -3.35805702],
                   [-3.63260007, -3.35510612],
                   [-3.33102298, -3.35218191],
                   [-3.02942705, -3.34914494],
                   [-2.72794294, -3.34611702],
                   [-2.42644811, -3.34310293],
                   [-2.12493801, -3.34008503],
                   [-1.82343197, -3.33706498],
                   [-1.52193105, -3.33404398],
                   [-1.22043204, -3.33102703],
                   [-0.91891372, -3.32801294],
                   [-0.61740172, -3.32498002],
                   [-0.31602439, -3.32195711],
                   [-0.01447497, -3.31906605],
                   [0.2879149, -3.31598711],
                   [0.58822119, -3.31210494],
                   [0.8842423, -3.31036997],
                   [1.19778895, -3.31261706],
                   [1.52116203, -3.29657197],
                   [1.84603596, -3.27153802],
                   [2.21528292, -3.21643209],
                   [2.62235594, -3.065727],
                   [2.97650504, -2.80183911],
                   [3.24306393, -2.48187208],
                   [3.43445992, -2.12438393],
                   [3.5526371, -1.74090803],
                   [3.59785104, -1.35725403],
                   [3.59097695, -1.02001297],
                   [3.58530903, -0.71996403],
                   [3.57961893, -0.41852671],
                   [3.57396507, -0.117625],
                   [3.56837702, 0.2000609],
                   [3.53442693, 0.58053428],
                   [3.39302611, 1.00035203],
                   [3.13294506, 1.36907005],
                   [2.80720401, 1.637146],
                   [2.51627493, 1.79799104],
                   [2.33819389, 1.90483999],
                   [2.19791102, 2.071913],
                   [1.99403703, 2.31603599],
                   [1.73011994, 2.57801104],
                   [1.39230895, 2.8126719],
                   [0.98792392, 2.96936488],
                   [0.54758632, 3.01816893],
                   [0.07397295, 2.93383408],
                   [-0.34273371, 2.67116904],
                   [-0.60916138, 2.34969592],
                   [-0.78927588, 2.06480002],
                   [-0.94139141, 1.81300795],
                   [-1.09436905, 1.58379996],
                   [-1.25910294, 1.36315501],
                   [-1.42510295, 1.15932906],
                   [-1.61648405, 0.96913689],
                   [-1.80935895, 0.7820887],
                   [-2.00414491, 0.6305781],
                   [-2.21863699, 0.49546599],
                   [-2.45032406, 0.37421331],
                   [-2.69443488, 0.2670069],
                   [-2.94107795, 0.1760564],
                   [-3.21073389, 0.1019471],
                   [-3.4832871, 0.02603748],
                   [-3.74964595, -0.02775873],
                   [-4.03384495, -0.07363202],
                   [-4.30463886, -0.1148273],
                   [-4.58149099, -0.13017],
                   [-4.86099005, -0.1468323],
                   [-5.13232613, -0.1401215],
                   [-5.40829277, -0.1255506],
                   [-5.66231012, -0.0959896],
                   [-5.88682222, -0.04590387],
                   [-6.05293179, 0.01670491],
                   [-6.17189312, 0.1170807],
                   [-6.27388382, 0.2526691],
                   [-6.33745909, 0.40641719],
                   [-6.36068487, 0.57994002],
                   [-6.34296417, 0.77996248],
                   [-6.28848791, 1.00146306],
                   [-6.20136023, 1.23470402],
                   [-6.09207296, 1.47019506],
                   [-5.98479986, 1.66642499],
                   [-5.87180614, 1.79639196],
                   [-5.72049713, 1.89191604],
                   [-5.51925802, 1.97255301],
                   [-5.28441811, 2.03460598],
                   [-5.01286507, 2.07986808],
                   [-4.71659994, 2.12837291],
                   [-4.40923786, 2.17880702],
                   [-4.09783983, 2.24175],
                   [-3.76511502, 2.31838107],
                   [-3.41697001, 2.44552398],
                   [-3.07207799, 2.62851191],
                   [-2.76677108, 2.87647605],
                   [-2.53759789, 3.1255939],
                   [-2.33408689, 3.345294],
                   [-2.12916803, 3.56648993],
                   [-1.92422199, 3.78775907],
                   [-1.71958601, 4.00878382],
                   [-1.51562798, 4.22847891],
                   [-1.33157599, 4.42592478],
                   [-1.14725995, 4.58244896],
                   [-0.95143771, 4.715137],
                   [-0.76136678, 4.81141806],
                   [-0.57266939, 4.86234617],
                   [-0.3596479, 4.87486506],
                   [-0.12675799, 4.8596158],
                   [0.09294575, 4.81840897],
                   [0.29591131, 4.7424221],
                   [0.52034998, 4.61636782],
                   [0.80924869, 4.4516201],
                   [1.16865599, 4.30574989],
                   [1.55361497, 4.22841978],
                   [1.94613802, 4.21153593],
                   [2.35140991, 4.27273989],
                   [2.70161104, 4.4037528],
                   [2.99049592, 4.53295517],
                   [3.26565409, 4.65647316],
                   [3.52463889, 4.77292299],
                   [3.71362996, 4.84925413],
                   [3.88413501, 4.85549307],
                   [4.1027751, 4.82507706],
                   [4.3335228, 4.76754379],
                   [4.5488162, 4.68455887],
                   [4.74440622, 4.5753808],
                   [4.91421413, 4.44469404],
                   [5.04756498, 4.29867697],
                   [5.13802195, 4.14478111],
                   [5.18499994, 3.976053],
                   [5.19378185, 3.75647593],
                   [5.18483591, 3.47164702],
                   [5.18169498, 3.16579294],
                   [5.17765903, 2.86500597],
                   [5.17378092, 2.56338406],
                   [5.16988182, 2.26190495],
                   [5.16598892, 1.96041405],
                   [5.16208601, 1.65889502],
                   [5.15822315, 1.35758495],
                   [5.1541028, 1.05507803],
                   [5.15147305, 0.75960231],
                   [5.14063692, 0.4325853],
                   [5.17015314, 0.08055034],
                   [5.22478199, -0.2584191],
                   [5.30875492, -0.59644538],
                   [5.42174911, -0.9210586],
                   [5.55247402, -1.22846603],
                   [5.69997597, -1.52675998],
                   [5.85917282, -1.80557597],
                   [6.01237392, -2.06531405],
                   [6.15570784, -2.31571198],
                   [6.27509212, -2.53997803],
                   [6.34379482, -2.7243669],
                   [6.35948515, -2.88696003],
                   [6.33161116, -3.0463469],
                   [6.26136398, -3.19852495],
                   [6.13907099, -3.34896207],
                   [5.95597696, -3.51386809],
                   [5.73184204, -3.70023108],
                   [5.49766779, -3.89826107],
                   [5.26153421, -4.10271692],
                   [5.06290293, -4.28688192],
                   [4.88111877, -4.41149712],
                   [4.66619396, -4.51128578],
                   [4.42638779, -4.60118103],
                   [4.17320204, -4.67098808],
                   [3.90787792, -4.72844315],
                   [3.63780093, -4.7713151],
                   [3.35834193, -4.80174589],
                   [3.06495905, -4.82563782],
                   [2.77979302, -4.84929609],
                   [2.49418807, -4.85585499],
                   [2.19415689, -4.86264515],
                   [1.89946699, -4.86811399],
                   [1.60355997, -4.86726999],
                   [1.30088699, -4.8664732],
                   [0.99823529, -4.86693478],
                   [0.69689238, -4.86742306],
                   [0.39558211, -4.86768723],
                   [0.09404182, -4.867939],
                   [-0.2075114, -4.86822701],
                   [-0.37902504, -4.86839246]]

center_waypoints = [[-0.3785184, -5.40179178],
                    [-0.50851834, -5.40191698],
                    [-0.63851828, -5.40203879],
                    [-0.81003734, -5.40219951],
                    [-1.11155647, -5.4024806],
                    [-1.41307551, -5.40276241],
                    [-1.71459448, -5.40304351],
                    [-2.01611352, -5.40332508],
                    [-2.31763208, -5.40360737],
                    [-2.61915147, -5.40389252],
                    [-2.92066991, -5.40417147],
                    [-3.22218907, -5.40444136],
                    [-3.52370858, -5.40475035],
                    [-3.82522857, -5.40512204],
                    [-4.12674594, -5.40529346],
                    [-4.42825794, -5.40510345],
                    [-4.72978544, -5.40600443],
                    [-5.03134489, -5.40906358],
                    [-5.33281946, -5.40632105],
                    [-5.63404298, -5.3949616],
                    [-5.92967701, -5.33914185],
                    [-6.19967031, -5.20890307],
                    [-6.40180802, -4.9877665],
                    [-6.51848888, -4.71073604],
                    [-6.57279158, -4.41463804],
                    [-6.58462191, -4.11364436],
                    [-6.53200698, -3.81783998],
                    [-6.40573096, -3.54483747],
                    [-6.22453451, -3.30463707],
                    [-5.99565005, -3.10926151],
                    [-5.73146152, -2.96522808],
                    [-5.44419456, -2.87529802],
                    [-5.14523339, -2.83896255],
                    [-4.84400797, -2.82903504],
                    [-4.54230213, -2.83106148],
                    [-4.24078393, -2.82839394],
                    [-3.93930745, -2.82468998],
                    [-3.637802, -2.82173157],
                    [-3.33629394, -2.81880844],
                    [-3.03479099, -2.81577241],
                    [-2.73328698, -2.81274402],
                    [-2.43178308, -2.80972993],
                    [-2.13027906, -2.80671251],
                    [-1.82877499, -2.80369198],
                    [-1.52727103, -2.80067146],
                    [-1.22576702, -2.79765403],
                    [-0.92426276, -2.79463995],
                    [-0.62275937, -2.79160702],
                    [-0.32125574, -2.78858304],
                    [-0.01974643, -2.78569257],
                    [0.2817551, -2.78262305],
                    [0.58322144, -2.77872896],
                    [0.88477874, -2.77697051],
                    [1.18651199, -2.77933705],
                    [1.48749852, -2.7642355],
                    [1.78814399, -2.7412895],
                    [2.08621794, -2.69888258],
                    [2.36825502, -2.59674096],
                    [2.60826552, -2.41594458],
                    [2.80034602, -2.18435556],
                    [2.94206846, -1.91928446],
                    [3.030581, -1.63148803],
                    [3.06499898, -1.33308899],
                    [3.05770099, -1.03150296],
                    [3.05200446, -0.73003617],
                    [3.046314, -0.4285707],
                    [3.04064953, -0.12710465],
                    [3.03559601, 0.17438035],
                    [3.01166093, 0.47455809],
                    [2.9170711, 0.75955826],
                    [2.74355555, 1.00452831],
                    [2.51013756, 1.19412595],
                    [2.24571198, 1.33830547],
                    [1.99195147, 1.49909252],
                    [1.79286849, 1.72484499],
                    [1.60002649, 1.95649397],
                    [1.38705897, 2.16956902],
                    [1.14063993, 2.34237647],
                    [0.86040801, 2.45143193],
                    [0.56150386, 2.48495096],
                    [0.26550877, 2.43600953],
                    [0.01374264, 2.27438253],
                    [-0.17485024, 2.04003644],
                    [-0.33523589, 1.78486651],
                    [-0.49125157, 1.52684498],
                    [-0.65867712, 1.27608648],
                    [-0.83881421, 1.0347158],
                    [-1.02970117, 0.80131672],
                    [-1.24286324, 0.58844975],
                    [-1.45988697, 0.37911942],
                    [-1.69760293, 0.19406105],
                    [-1.95231152, 0.03331265],
                    [-2.2191205, -0.10647394],
                    [-2.49496543, -0.2276919],
                    [-2.77776396, -0.33172666],
                    [-3.0683825, -0.4121065],
                    [-3.35893857, -0.49266528],
                    [-3.65402496, -0.55251736],
                    [-3.95167542, -0.6006645],
                    [-4.24970603, -0.64539064],
                    [-4.55074453, -0.66268248],
                    [-4.85175157, -0.68015168],
                    [-5.15281749, -0.67312726],
                    [-5.45390534, -0.65699629],
                    [-5.7529366, -0.62163378],
                    [-6.0466485, -0.55479542],
                    [-6.32525539, -0.44193989],
                    [-6.55723262, -0.25173985],
                    [-6.73747444, -0.0111472],
                    [-6.85218453, 0.2665135],
                    [-6.893857, 0.56436121],
                    [-6.86961269, 0.86455879],
                    [-6.79857945, 1.15741801],
                    [-6.69369411, 1.43994153],
                    [-6.56684256, 1.71331853],
                    [-6.41924381, 1.97589803],
                    [-6.219805, 2.200634],
                    [-5.96770048, 2.36457407],
                    [-5.6889596, 2.47823751],
                    [-5.39759707, 2.55586004],
                    [-5.1003561, 2.60604358],
                    [-4.80279851, 2.65476143],
                    [-4.50524545, 2.70349503],
                    [-4.20980692, 2.76326549],
                    [-3.91588962, 2.83002758],
                    [-3.63294399, 2.93324351],
                    [-3.36647451, 3.07331049],
                    [-3.13359201, 3.26371956],
                    [-2.93029046, 3.48657596],
                    [-2.72539091, 3.70777988],
                    [-2.52047849, 3.92896903],
                    [-2.31558752, 4.15017903],
                    [-2.11074203, 4.37142944],
                    [-1.90559596, 4.59240198],
                    [-1.69934744, 4.81226587],
                    [-1.46969646, 5.00736046],
                    [-1.22018284, 5.17588806],
                    [-0.9506869, 5.31008959],
                    [-0.66009119, 5.38853312],
                    [-0.359834, 5.40826464],
                    [-0.05917907, 5.38871741],
                    [0.23667022, 5.33208036],
                    [0.51887745, 5.22698498],
                    [0.78254896, 5.08087492],
                    [1.04382133, 4.93067217],
                    [1.322375, 4.8165195],
                    [1.617805, 4.75794291],
                    [1.91874152, 4.74423146],
                    [2.21578491, 4.7886095],
                    [2.49707305, 4.8963778],
                    [2.77223146, 5.01965404],
                    [3.04730654, 5.14313507],
                    [3.32242095, 5.26650453],
                    [3.60411453, 5.37128997],
                    [3.90384448, 5.38852859],
                    [4.20257258, 5.34905744],
                    [4.494771, 5.27598691],
                    [4.77576852, 5.16726732],
                    [5.03862619, 5.02029634],
                    [5.27660799, 4.83608341],
                    [5.47848797, 4.61303353],
                    [5.62920952, 4.35274601],
                    [5.71119404, 4.06343353],
                    [5.72714591, 3.76263702],
                    [5.71812844, 3.46096146],
                    [5.71505737, 3.15949845],
                    [5.71101308, 2.85799944],
                    [5.70713639, 2.55650604],
                    [5.70323682, 2.25501204],
                    [5.69934392, 1.95351851],
                    [5.69544148, 1.65202451],
                    [5.691576, 1.350532],
                    [5.68746781, 1.04902852],
                    [5.68473744, 0.747592],
                    [5.67387342, 0.4457626],
                    [5.69955897, 0.14569853],
                    [5.74740601, -0.15174625],
                    [5.81996036, -0.4441824],
                    [5.91923594, -0.72864684],
                    [6.03715301, -1.00575241],
                    [6.17077947, -1.27604246],
                    [6.32041097, -1.53766847],
                    [6.4735949, -1.79737705],
                    [6.62331343, -2.05907899],
                    [6.76357412, -2.3257345],
                    [6.8646028, -2.60915244],
                    [6.89247251, -2.90792453],
                    [6.84110999, -3.20422697],
                    [6.71601605, -3.47746301],
                    [6.52889657, -3.71303761],
                    [6.30641699, -3.91599643],
                    [6.07466054, -4.10887599],
                    [5.84442782, -4.30356646],
                    [5.61649609, -4.50085902],
                    [5.39460397, -4.70460153],
                    [5.14601898, -4.87446904],
                    [4.87349749, -5.0027535],
                    [4.59127545, -5.10845542],
                    [4.30089164, -5.18887854],
                    [4.00622797, -5.25269747],
                    [3.70865345, -5.29998803],
                    [3.40901244, -5.33273339],
                    [3.10849202, -5.35725784],
                    [2.80797946, -5.38195062],
                    [2.50655508, -5.38911152],
                    [2.20511246, -5.39593196],
                    [1.90365601, -5.40149689],
                    [1.6021235, -5.40066743],
                    [1.30059201, -5.39987254],
                    [0.99907479, -5.40033388],
                    [0.69755813, -5.40082192],
                    [0.3960389, -5.40108657],
                    [0.09451947, -5.40133858],
                    [-0.2069995, -5.40162659],
                    [-0.3785184, -5.40179178]]


# thanks to https://stackoverflow.com/questions/20924085/python-conversion-between-coordinates
def rect(r, theta):
    """
    theta in degrees

    returns tuple; (float, float); (x,y)
    """

    x = r * math.cos(math.radians(theta))
    y = r * math.sin(math.radians(theta))
    return x, y


# thanks to https://stackoverflow.com/questions/20924085/python-conversion-between-coordinates
def polar(x, y):
    """
    returns r, theta(degrees)
    """

    r = (x ** 2 + y ** 2) ** .5
    theta = math.degrees(math.atan2(y, x))
    return r, theta


def angle_mod_360(angle):
    """
    Maps an angle to the interval -180, +180.

    Examples:
    angle_mod_360(362) == 2
    angle_mod_360(270) == -90

    :param angle: angle in degree
    :return: angle in degree. Between -180 and +180
    """

    n = math.floor(angle / 360.0)

    angle_between_0_and_360 = angle - n * 360.0

    if angle_between_0_and_360 <= 180.0:
        return angle_between_0_and_360
    else:
        return angle_between_0_and_360 - 360


def get_waypoints_ordered_in_driving_direction(params):
    # waypoints are always provided in counter clock wise order
    if params['is_reversed']:  # driving clock wise.
        return list(reversed(params['waypoints']))
    else:  # driving counter clock wise.
        return params['waypoints']


def up_sample(waypoints, factor):
    """
    Adds extra waypoints in between provided waypoints

    :param waypoints:
    :param factor: integer. E.g. 3 means that the resulting list has 3 times as many points.
    :return:
    """
    p = waypoints
    n = len(p)

    return [[i / factor * p[(j + 1) % n][0] + (1 - i / factor) * p[j][0],
             i / factor * p[(j + 1) % n][1] + (1 - i / factor) * p[j][1]] for j in range(n) for i in range(factor)]


def get_target_point(params):
    global right_waypoints
    global center_waypoints
    right_waypoints = up_sample(right_waypoints, 20)  # returns more waypoints to be more precise
    center_waypoints = up_sample(center_waypoints, 20)

    waypoints_between_right_and_center = get_waypoints_between_right_and_center(center_waypoints, right_waypoints)

    car = [params['x'], params['y']]

    distances = [dist(p, car) for p in waypoints_between_right_and_center]  # distance from the car to each waypoint
    min_dist = min(distances)  # closer waypoint
    i_closest = distances.index(min_dist)  # index of the closer waypoint

    n = len(waypoints_between_right_and_center)

    waypoints_starting_with_closest = [waypoints_between_right_and_center[(i + i_closest) % n] for i in range(n)]

    r = params['track_width'] * 1.5

    is_inside = [dist(p, car) < r for p in waypoints_starting_with_closest]
    i_first_outside = is_inside.index(False)

    if i_first_outside < 0:  # this can only happen if we choose r as big as the entire track
        return center_waypoints[i_closest]

    return waypoints_starting_with_closest[i_first_outside]


def get_waypoints_between_right_and_center(center_waypoints, right_waypoints):
    return [
        [(x_r + x_c) / 2, (y_r + y_c) / 2]
        for (x_r, y_r), (x_c, y_c) in zip(right_waypoints, center_waypoints)
    ]


def get_target_steering_degree(params):
    tx, ty = get_target_point(params)
    car_x = params['x']
    car_y = params['y']
    dx = tx - car_x
    dy = ty - car_y
    heading = params['heading']

    _, target_angle = polar(dx, dy)

    steering_angle = target_angle - heading

    return angle_mod_360(steering_angle)


def score_steer_to_point_ahead(params):
    best_stearing_angle = get_target_steering_degree(params)
    steering_angle = params['steering_angle']

    error = (steering_angle - best_stearing_angle) / 60.0  # 60 degree is already really bad

    score = 1.0 - abs(error)

    return max(score, 0.01)  # optimizer is rumored to struggle with negative numbers and numbers too close to zero


def reward_function(params):
    return float(score_steer_to_point_ahead(params))


def get_test_params():
    return {
        'x': 0.7,
        'y': 1.05,
        'heading': 160.0,
        'track_width': 0.45,
        'is_reversed': False,
        'steering_angle': 0.0,
        'waypoints': [
            [0.75, -0.7],
            [1.0, 0.0],
            [0.7, 0.52],
            [0.58, 0.7],
            [0.48, 0.8],
            [0.15, 0.95],
            [-0.1, 1.0],
            [-0.7, 0.75],
            [-0.9, 0.25],
            [-0.9, -0.55],
        ]
    }


def test_reward():
    params = get_test_params()

    reward = reward_function(params)

    print("test_reward: {}".format(reward))

    assert reward > 0.0


def test_get_target_point():
    result = get_target_point(get_test_params())
    expected = [-0.611942043752458, 1.8426258223482355]
    eps = 0.1

    print("get_target_point: x={}, y={}".format(result[0], result[1]))

    assert dist(result, expected) < eps


def test_get_target_steering():
    result = get_target_steering_degree(get_test_params())
    expected = -11.148527828026204
    eps = 1.0

    print("get_target_steering={}".format(result))

    assert abs(result - expected) < eps


def test_angle_mod_360():
    eps = 0.001

    assert abs(-90 - angle_mod_360(270.0)) < eps
    assert abs(-179 - angle_mod_360(181)) < eps
    assert abs(0.01 - angle_mod_360(360.01)) < eps
    assert abs(5 - angle_mod_360(365.0)) < eps
    assert abs(-2 - angle_mod_360(-722)) < eps


def test_upsample():
    params = get_test_params()
    print(repr(up_sample(params['waypoints'], 2)))


def test_get_waypoints_between_right_and_center():
    calculated_waypoints = get_waypoints_between_right_and_center(center_waypoints, right_waypoints)

    for p in calculated_waypoints:
        print("Mean Scores:{}".format(p))

    print("Mean Scores: {},{},{}".format(center_waypoints[0], calculated_waypoints[0], right_waypoints[0]))
    print("Mean Scores: {},{},{}", center_waypoints[1], calculated_waypoints[1], right_waypoints[1])
    print("Mean Scores: {},{},{}", center_waypoints[2], calculated_waypoints[2], right_waypoints[2])



def d_score_steer_to_point_ahead():
    params_l_45 = {**get_test_params(), 'steering_angle': +45}
    params_l_15 = {**get_test_params(), 'steering_angle': +15}
    params_0 = {**get_test_params(), 'steering_angle': 0.0}
    params_r_15 = {**get_test_params(), 'steering_angle': -15}
    params_r_45 = {**get_test_params(), 'steering_angle': -45}

    sc = score_steer_to_point_ahead

    # 0.828, 0.328, 0.078, 0.01, 0.01
    print("Scores: {}, {}, {}, {}, {}".format(sc(params_l_45), sc(params_l_15), sc(params_0), sc(params_r_15),
                                              sc(params_r_45)))


def run_tests():
    test_angle_mod_360()
    test_reward()
    test_upsample()
    test_get_target_point()
    test_get_target_steering()
    ##test_score_steer_to_point_ahead()

    print("All tests successful")


# run_tests()
